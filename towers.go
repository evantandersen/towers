package main

import (
    "log"
    "runtime"
    gl "github.com/go-gl/gl"
    glfw "github.com/go-gl/glfw3"
)

func errorCallback(err glfw.ErrorCode, desc string) {
    log.Fatalf("%v: %v\n", err, desc)
}

// OpenGL and glfw need to be called from the main thread
func init() {
    runtime.LockOSThread()
}

func printCoordinates(w *glfw.Window, button glfw.MouseButton, action glfw.Action, mod glfw.ModifierKey) {
    if action == glfw.Release {
        x,y := w.GetCursorPosition()
        w,h := w.GetSize()
        
        var newTower Tower
        newTower.ID = NewID()
        newTower.Interval = 0.3
        newTower.X = float64(x)/float64(w)
        newTower.Y = float64(y)/float64(h)
        newTower.W = 0.08
        newTower.H = 0.10
        newTower.Angle = 0.01
        newTower.Range = 0.4
        newTower.TextureName = "wizard.png"
        newTower.Z = 2.0
        state.Renderables[newTower.ID] = &newTower
        state.Entities[newTower.ID] = &newTower
    }
}

var state *GameState

func main() {
	glfw.SetErrorCallback(errorCallback)
    if !glfw.Init() {
        return
    }
    defer glfw.Terminate()

	// Get the right version of OpenGL
	glfw.WindowHint(glfw.OpenglForwardCompatible, glfw.True)
	glfw.WindowHint(glfw.OpenglProfile, glfw.OpenglCoreProfile)
	glfw.WindowHint(glfw.ContextVersionMajor, 3)
	glfw.WindowHint(glfw.ContextVersionMinor, 2)
	
	//we don't handle this properly yet
	glfw.WindowHint(glfw.Resizable, glfw.False)

	_, monitorHeight, err := monitorResolution()
	if err != nil {
		log.Fatalf("Failed to discover monitor resolution: %v", err)
	}
	
	//create a window that is 80% of the monitors height,
	//with a width based on the aspect ratio of the input images
	windowHeight := int(0.8 * float64(monitorHeight))
	windowWidth := int(float64(windowHeight) * (4.0/3.0))

	window, err := openWindow("towers", windowWidth, windowHeight)
	if err != nil {
		log.Fatalf("Failed to open window: %v", err)
	}
    window.SetMouseButtonCallback(printCoordinates)

	result := gl.Init()
	if result != 0 {
		log.Fatalf("Failed to initialize GL: %d", result)
	}
	//clear a spurious error sometimes generated by GLEW's initialization 
	gl.GetError()
    
    err = start()
    if err != nil {
        log.Fatalf("Failed to start gl: %v", err)
    }
        
    level, err := loadLevel("level1.json")
    if err != nil {
        log.Fatalf("Failed to load level 1: %v", err)
    } 
        
    state = NewGameState(level)
    
    
    for !window.ShouldClose() {
		glfw.PollEvents()
        for _, entity := range state.Entities {
            entity.Update(state)
        }
        drawRenderables(state.Renderables)
		window.SwapBuffers()
        state.Time += 1/60.0
    }
}